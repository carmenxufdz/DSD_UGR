#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require './calculadora_types.rb'

module Calculadora
  class Client
    include ::Thrift::Client

    def ping()
      send_ping()
      recv_ping()
    end

    def send_ping()
      send_message('ping', Ping_args)
    end

    def recv_ping()
      result = receive_message(Ping_result)
      return
    end

    def suma(n1, n2)
      send_suma(n1, n2)
      return recv_suma()
    end

    def send_suma(n1, n2)
      send_message('suma', Suma_args, :n1 => n1, :n2 => n2)
    end

    def recv_suma()
      result = receive_message(Suma_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'suma failed: unknown result')
    end

    def resta(n1, n2)
      send_resta(n1, n2)
      return recv_resta()
    end

    def send_resta(n1, n2)
      send_message('resta', Resta_args, :n1 => n1, :n2 => n2)
    end

    def recv_resta()
      result = receive_message(Resta_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'resta failed: unknown result')
    end

    def multiplica(n1, n2)
      send_multiplica(n1, n2)
      return recv_multiplica()
    end

    def send_multiplica(n1, n2)
      send_message('multiplica', Multiplica_args, :n1 => n1, :n2 => n2)
    end

    def recv_multiplica()
      result = receive_message(Multiplica_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'multiplica failed: unknown result')
    end

    def divide(n1, n2)
      send_divide(n1, n2)
      return recv_divide()
    end

    def send_divide(n1, n2)
      send_message('divide', Divide_args, :n1 => n1, :n2 => n2)
    end

    def recv_divide()
      result = receive_message(Divide_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'divide failed: unknown result')
    end

    def logaritmo(num, base)
      send_logaritmo(num, base)
      return recv_logaritmo()
    end

    def send_logaritmo(num, base)
      send_message('logaritmo', Logaritmo_args, :num => num, :base => base)
    end

    def recv_logaritmo()
      result = receive_message(Logaritmo_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'logaritmo failed: unknown result')
    end

    def logaritmo_n(num)
      send_logaritmo_n(num)
      return recv_logaritmo_n()
    end

    def send_logaritmo_n(num)
      send_message('logaritmo_n', Logaritmo_n_args, :num => num)
    end

    def recv_logaritmo_n()
      result = receive_message(Logaritmo_n_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'logaritmo_n failed: unknown result')
    end

    def logaritmo10(num)
      send_logaritmo10(num)
      return recv_logaritmo10()
    end

    def send_logaritmo10(num)
      send_message('logaritmo10', Logaritmo10_args, :num => num)
    end

    def recv_logaritmo10()
      result = receive_message(Logaritmo10_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'logaritmo10 failed: unknown result')
    end

    def modulo(num, mod)
      send_modulo(num, mod)
      return recv_modulo()
    end

    def send_modulo(num, mod)
      send_message('modulo', Modulo_args, :num => num, :mod => mod)
    end

    def recv_modulo()
      result = receive_message(Modulo_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'modulo failed: unknown result')
    end

    def potencia(num, exp)
      send_potencia(num, exp)
      return recv_potencia()
    end

    def send_potencia(num, exp)
      send_message('potencia', Potencia_args, :num => num, :exp => exp)
    end

    def recv_potencia()
      result = receive_message(Potencia_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'potencia failed: unknown result')
    end

    def raiz(num, raiz)
      send_raiz(num, raiz)
      return recv_raiz()
    end

    def send_raiz(num, raiz)
      send_message('raiz', Raiz_args, :num => num, :raiz => raiz)
    end

    def recv_raiz()
      result = receive_message(Raiz_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'raiz failed: unknown result')
    end

    def factorial(num)
      send_factorial(num)
      return recv_factorial()
    end

    def send_factorial(num)
      send_message('factorial', Factorial_args, :num => num)
    end

    def recv_factorial()
      result = receive_message(Factorial_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'factorial failed: unknown result')
    end

    def grados_a_radianes(grados)
      send_grados_a_radianes(grados)
      return recv_grados_a_radianes()
    end

    def send_grados_a_radianes(grados)
      send_message('grados_a_radianes', Grados_a_radianes_args, :grados => grados)
    end

    def recv_grados_a_radianes()
      result = receive_message(Grados_a_radianes_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'grados_a_radianes failed: unknown result')
    end

    def radianes_a_grados(radians)
      send_radianes_a_grados(radians)
      return recv_radianes_a_grados()
    end

    def send_radianes_a_grados(radians)
      send_message('radianes_a_grados', Radianes_a_grados_args, :radians => radians)
    end

    def recv_radianes_a_grados()
      result = receive_message(Radianes_a_grados_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'radianes_a_grados failed: unknown result')
    end

    def seno(grados)
      send_seno(grados)
      return recv_seno()
    end

    def send_seno(grados)
      send_message('seno', Seno_args, :grados => grados)
    end

    def recv_seno()
      result = receive_message(Seno_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'seno failed: unknown result')
    end

    def coseno(grados)
      send_coseno(grados)
      return recv_coseno()
    end

    def send_coseno(grados)
      send_message('coseno', Coseno_args, :grados => grados)
    end

    def recv_coseno()
      result = receive_message(Coseno_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'coseno failed: unknown result')
    end

    def tangente(grados)
      send_tangente(grados)
      return recv_tangente()
    end

    def send_tangente(grados)
      send_message('tangente', Tangente_args, :grados => grados)
    end

    def recv_tangente()
      result = receive_message(Tangente_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'tangente failed: unknown result')
    end

    def suma_vectorial(v1, v2)
      send_suma_vectorial(v1, v2)
      return recv_suma_vectorial()
    end

    def send_suma_vectorial(v1, v2)
      send_message('suma_vectorial', Suma_vectorial_args, :v1 => v1, :v2 => v2)
    end

    def recv_suma_vectorial()
      result = receive_message(Suma_vectorial_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'suma_vectorial failed: unknown result')
    end

    def resta_vectorial(v1, v2)
      send_resta_vectorial(v1, v2)
      return recv_resta_vectorial()
    end

    def send_resta_vectorial(v1, v2)
      send_message('resta_vectorial', Resta_vectorial_args, :v1 => v1, :v2 => v2)
    end

    def recv_resta_vectorial()
      result = receive_message(Resta_vectorial_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'resta_vectorial failed: unknown result')
    end

    def multiplica_por_escalar(v1, num)
      send_multiplica_por_escalar(v1, num)
      return recv_multiplica_por_escalar()
    end

    def send_multiplica_por_escalar(v1, num)
      send_message('multiplica_por_escalar', Multiplica_por_escalar_args, :v1 => v1, :num => num)
    end

    def recv_multiplica_por_escalar()
      result = receive_message(Multiplica_por_escalar_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'multiplica_por_escalar failed: unknown result')
    end

    def producto_escalar(v1, v2)
      send_producto_escalar(v1, v2)
      return recv_producto_escalar()
    end

    def send_producto_escalar(v1, v2)
      send_message('producto_escalar', Producto_escalar_args, :v1 => v1, :v2 => v2)
    end

    def recv_producto_escalar()
      result = receive_message(Producto_escalar_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'producto_escalar failed: unknown result')
    end

    def producto_vectorial(v1, v2)
      send_producto_vectorial(v1, v2)
      return recv_producto_vectorial()
    end

    def send_producto_vectorial(v1, v2)
      send_message('producto_vectorial', Producto_vectorial_args, :v1 => v1, :v2 => v2)
    end

    def recv_producto_vectorial()
      result = receive_message(Producto_vectorial_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'producto_vectorial failed: unknown result')
    end

    def suma_matricial(m1, m2)
      send_suma_matricial(m1, m2)
      return recv_suma_matricial()
    end

    def send_suma_matricial(m1, m2)
      send_message('suma_matricial', Suma_matricial_args, :m1 => m1, :m2 => m2)
    end

    def recv_suma_matricial()
      result = receive_message(Suma_matricial_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'suma_matricial failed: unknown result')
    end

    def resta_matricial(m1, m2)
      send_resta_matricial(m1, m2)
      return recv_resta_matricial()
    end

    def send_resta_matricial(m1, m2)
      send_message('resta_matricial', Resta_matricial_args, :m1 => m1, :m2 => m2)
    end

    def recv_resta_matricial()
      result = receive_message(Resta_matricial_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'resta_matricial failed: unknown result')
    end

    def mult_matricial(m1, m2)
      send_mult_matricial(m1, m2)
      return recv_mult_matricial()
    end

    def send_mult_matricial(m1, m2)
      send_message('mult_matricial', Mult_matricial_args, :m1 => m1, :m2 => m2)
    end

    def recv_mult_matricial()
      result = receive_message(Mult_matricial_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'mult_matricial failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_ping(seqid, iprot, oprot)
      args = read_args(iprot, Ping_args)
      result = Ping_result.new()
      @handler.ping()
      write_result(result, oprot, 'ping', seqid)
    end

    def process_suma(seqid, iprot, oprot)
      args = read_args(iprot, Suma_args)
      result = Suma_result.new()
      result.success = @handler.suma(args.n1, args.n2)
      write_result(result, oprot, 'suma', seqid)
    end

    def process_resta(seqid, iprot, oprot)
      args = read_args(iprot, Resta_args)
      result = Resta_result.new()
      result.success = @handler.resta(args.n1, args.n2)
      write_result(result, oprot, 'resta', seqid)
    end

    def process_multiplica(seqid, iprot, oprot)
      args = read_args(iprot, Multiplica_args)
      result = Multiplica_result.new()
      result.success = @handler.multiplica(args.n1, args.n2)
      write_result(result, oprot, 'multiplica', seqid)
    end

    def process_divide(seqid, iprot, oprot)
      args = read_args(iprot, Divide_args)
      result = Divide_result.new()
      result.success = @handler.divide(args.n1, args.n2)
      write_result(result, oprot, 'divide', seqid)
    end

    def process_logaritmo(seqid, iprot, oprot)
      args = read_args(iprot, Logaritmo_args)
      result = Logaritmo_result.new()
      result.success = @handler.logaritmo(args.num, args.base)
      write_result(result, oprot, 'logaritmo', seqid)
    end

    def process_logaritmo_n(seqid, iprot, oprot)
      args = read_args(iprot, Logaritmo_n_args)
      result = Logaritmo_n_result.new()
      result.success = @handler.logaritmo_n(args.num)
      write_result(result, oprot, 'logaritmo_n', seqid)
    end

    def process_logaritmo10(seqid, iprot, oprot)
      args = read_args(iprot, Logaritmo10_args)
      result = Logaritmo10_result.new()
      result.success = @handler.logaritmo10(args.num)
      write_result(result, oprot, 'logaritmo10', seqid)
    end

    def process_modulo(seqid, iprot, oprot)
      args = read_args(iprot, Modulo_args)
      result = Modulo_result.new()
      result.success = @handler.modulo(args.num, args.mod)
      write_result(result, oprot, 'modulo', seqid)
    end

    def process_potencia(seqid, iprot, oprot)
      args = read_args(iprot, Potencia_args)
      result = Potencia_result.new()
      result.success = @handler.potencia(args.num, args.exp)
      write_result(result, oprot, 'potencia', seqid)
    end

    def process_raiz(seqid, iprot, oprot)
      args = read_args(iprot, Raiz_args)
      result = Raiz_result.new()
      result.success = @handler.raiz(args.num, args.raiz)
      write_result(result, oprot, 'raiz', seqid)
    end

    def process_factorial(seqid, iprot, oprot)
      args = read_args(iprot, Factorial_args)
      result = Factorial_result.new()
      result.success = @handler.factorial(args.num)
      write_result(result, oprot, 'factorial', seqid)
    end

    def process_grados_a_radianes(seqid, iprot, oprot)
      args = read_args(iprot, Grados_a_radianes_args)
      result = Grados_a_radianes_result.new()
      result.success = @handler.grados_a_radianes(args.grados)
      write_result(result, oprot, 'grados_a_radianes', seqid)
    end

    def process_radianes_a_grados(seqid, iprot, oprot)
      args = read_args(iprot, Radianes_a_grados_args)
      result = Radianes_a_grados_result.new()
      result.success = @handler.radianes_a_grados(args.radians)
      write_result(result, oprot, 'radianes_a_grados', seqid)
    end

    def process_seno(seqid, iprot, oprot)
      args = read_args(iprot, Seno_args)
      result = Seno_result.new()
      result.success = @handler.seno(args.grados)
      write_result(result, oprot, 'seno', seqid)
    end

    def process_coseno(seqid, iprot, oprot)
      args = read_args(iprot, Coseno_args)
      result = Coseno_result.new()
      result.success = @handler.coseno(args.grados)
      write_result(result, oprot, 'coseno', seqid)
    end

    def process_tangente(seqid, iprot, oprot)
      args = read_args(iprot, Tangente_args)
      result = Tangente_result.new()
      result.success = @handler.tangente(args.grados)
      write_result(result, oprot, 'tangente', seqid)
    end

    def process_suma_vectorial(seqid, iprot, oprot)
      args = read_args(iprot, Suma_vectorial_args)
      result = Suma_vectorial_result.new()
      result.success = @handler.suma_vectorial(args.v1, args.v2)
      write_result(result, oprot, 'suma_vectorial', seqid)
    end

    def process_resta_vectorial(seqid, iprot, oprot)
      args = read_args(iprot, Resta_vectorial_args)
      result = Resta_vectorial_result.new()
      result.success = @handler.resta_vectorial(args.v1, args.v2)
      write_result(result, oprot, 'resta_vectorial', seqid)
    end

    def process_multiplica_por_escalar(seqid, iprot, oprot)
      args = read_args(iprot, Multiplica_por_escalar_args)
      result = Multiplica_por_escalar_result.new()
      result.success = @handler.multiplica_por_escalar(args.v1, args.num)
      write_result(result, oprot, 'multiplica_por_escalar', seqid)
    end

    def process_producto_escalar(seqid, iprot, oprot)
      args = read_args(iprot, Producto_escalar_args)
      result = Producto_escalar_result.new()
      result.success = @handler.producto_escalar(args.v1, args.v2)
      write_result(result, oprot, 'producto_escalar', seqid)
    end

    def process_producto_vectorial(seqid, iprot, oprot)
      args = read_args(iprot, Producto_vectorial_args)
      result = Producto_vectorial_result.new()
      result.success = @handler.producto_vectorial(args.v1, args.v2)
      write_result(result, oprot, 'producto_vectorial', seqid)
    end

    def process_suma_matricial(seqid, iprot, oprot)
      args = read_args(iprot, Suma_matricial_args)
      result = Suma_matricial_result.new()
      result.success = @handler.suma_matricial(args.m1, args.m2)
      write_result(result, oprot, 'suma_matricial', seqid)
    end

    def process_resta_matricial(seqid, iprot, oprot)
      args = read_args(iprot, Resta_matricial_args)
      result = Resta_matricial_result.new()
      result.success = @handler.resta_matricial(args.m1, args.m2)
      write_result(result, oprot, 'resta_matricial', seqid)
    end

    def process_mult_matricial(seqid, iprot, oprot)
      args = read_args(iprot, Mult_matricial_args)
      result = Mult_matricial_result.new()
      result.success = @handler.mult_matricial(args.m1, args.m2)
      write_result(result, oprot, 'mult_matricial', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Ping_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Ping_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    N1 = 1
    N2 = 2

    FIELDS = {
      N1 => {:type => ::Thrift::Types::DOUBLE, :name => 'n1'},
      N2 => {:type => ::Thrift::Types::DOUBLE, :name => 'n2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    N1 = 1
    N2 = 2

    FIELDS = {
      N1 => {:type => ::Thrift::Types::DOUBLE, :name => 'n1'},
      N2 => {:type => ::Thrift::Types::DOUBLE, :name => 'n2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplica_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    N1 = 1
    N2 = 2

    FIELDS = {
      N1 => {:type => ::Thrift::Types::DOUBLE, :name => 'n1'},
      N2 => {:type => ::Thrift::Types::DOUBLE, :name => 'n2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplica_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Divide_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    N1 = 1
    N2 = 2

    FIELDS = {
      N1 => {:type => ::Thrift::Types::DOUBLE, :name => 'n1'},
      N2 => {:type => ::Thrift::Types::DOUBLE, :name => 'n2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Divide_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Logaritmo_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM = 1
    BASE = 2

    FIELDS = {
      NUM => {:type => ::Thrift::Types::I64, :name => 'num'},
      BASE => {:type => ::Thrift::Types::I64, :name => 'base'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Logaritmo_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Logaritmo_n_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM = 1

    FIELDS = {
      NUM => {:type => ::Thrift::Types::I64, :name => 'num'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Logaritmo_n_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Logaritmo10_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM = 1

    FIELDS = {
      NUM => {:type => ::Thrift::Types::I64, :name => 'num'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Logaritmo10_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Modulo_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM = 1
    MOD = 2

    FIELDS = {
      NUM => {:type => ::Thrift::Types::I64, :name => 'num'},
      MOD => {:type => ::Thrift::Types::I64, :name => 'mod'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Modulo_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Potencia_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM = 1
    EXP = 2

    FIELDS = {
      NUM => {:type => ::Thrift::Types::I64, :name => 'num'},
      EXP => {:type => ::Thrift::Types::I64, :name => 'exp'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Potencia_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Raiz_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM = 1
    RAIZ = 2

    FIELDS = {
      NUM => {:type => ::Thrift::Types::DOUBLE, :name => 'num'},
      RAIZ => {:type => ::Thrift::Types::I64, :name => 'raiz'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Raiz_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Factorial_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM = 1

    FIELDS = {
      NUM => {:type => ::Thrift::Types::I64, :name => 'num'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Factorial_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Grados_a_radianes_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GRADOS = 1

    FIELDS = {
      GRADOS => {:type => ::Thrift::Types::DOUBLE, :name => 'grados'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Grados_a_radianes_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Radianes_a_grados_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RADIANS = 1

    FIELDS = {
      RADIANS => {:type => ::Thrift::Types::DOUBLE, :name => 'radians'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Radianes_a_grados_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Seno_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GRADOS = 1

    FIELDS = {
      GRADOS => {:type => ::Thrift::Types::DOUBLE, :name => 'grados'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Seno_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Coseno_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GRADOS = 1

    FIELDS = {
      GRADOS => {:type => ::Thrift::Types::DOUBLE, :name => 'grados'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Coseno_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Tangente_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GRADOS = 1

    FIELDS = {
      GRADOS => {:type => ::Thrift::Types::DOUBLE, :name => 'grados'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Tangente_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_vectorial_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    V1 = 1
    V2 = 2

    FIELDS = {
      V1 => {:type => ::Thrift::Types::LIST, :name => 'v1', :element => {:type => ::Thrift::Types::DOUBLE}},
      V2 => {:type => ::Thrift::Types::LIST, :name => 'v2', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_vectorial_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_vectorial_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    V1 = 1
    V2 = 2

    FIELDS = {
      V1 => {:type => ::Thrift::Types::LIST, :name => 'v1', :element => {:type => ::Thrift::Types::DOUBLE}},
      V2 => {:type => ::Thrift::Types::LIST, :name => 'v2', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_vectorial_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplica_por_escalar_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    V1 = 1
    NUM = 2

    FIELDS = {
      V1 => {:type => ::Thrift::Types::LIST, :name => 'v1', :element => {:type => ::Thrift::Types::DOUBLE}},
      NUM => {:type => ::Thrift::Types::DOUBLE, :name => 'num'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplica_por_escalar_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Producto_escalar_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    V1 = 1
    V2 = 2

    FIELDS = {
      V1 => {:type => ::Thrift::Types::LIST, :name => 'v1', :element => {:type => ::Thrift::Types::DOUBLE}},
      V2 => {:type => ::Thrift::Types::LIST, :name => 'v2', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Producto_escalar_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Producto_vectorial_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    V1 = 1
    V2 = 2

    FIELDS = {
      V1 => {:type => ::Thrift::Types::LIST, :name => 'v1', :element => {:type => ::Thrift::Types::DOUBLE}},
      V2 => {:type => ::Thrift::Types::LIST, :name => 'v2', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Producto_vectorial_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_matricial_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    M1 = 1
    M2 = 2

    FIELDS = {
      M1 => {:type => ::Thrift::Types::LIST, :name => 'm1', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}},
      M2 => {:type => ::Thrift::Types::LIST, :name => 'm2', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_matricial_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_matricial_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    M1 = 1
    M2 = 2

    FIELDS = {
      M1 => {:type => ::Thrift::Types::LIST, :name => 'm1', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}},
      M2 => {:type => ::Thrift::Types::LIST, :name => 'm2', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_matricial_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Mult_matricial_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    M1 = 1
    M2 = 2

    FIELDS = {
      M1 => {:type => ::Thrift::Types::LIST, :name => 'm1', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}},
      M2 => {:type => ::Thrift::Types::LIST, :name => 'm2', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Mult_matricial_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

