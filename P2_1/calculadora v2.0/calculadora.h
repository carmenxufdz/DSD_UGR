/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CALCULADORA_H_RPCGEN
#define _CALCULADORA_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


typedef struct {
	u_int m_len;
	double *m_val;
} m;

struct matrix {
	int rows;
	int cols;
	m data;
};
typedef struct matrix matrix;

struct vector3D {
	int x;
	int y;
	int z;
};
typedef struct vector3D vector3D;

struct suma_1_argument {
	double arg1;
	double arg2;
};
typedef struct suma_1_argument suma_1_argument;

struct resta_1_argument {
	double arg1;
	double arg2;
};
typedef struct resta_1_argument resta_1_argument;

struct multiplica_1_argument {
	double arg1;
	double arg2;
};
typedef struct multiplica_1_argument multiplica_1_argument;

struct divide_1_argument {
	double arg1;
	double arg2;
};
typedef struct divide_1_argument divide_1_argument;

struct modulo_1_argument {
	int arg1;
	int arg2;
};
typedef struct modulo_1_argument modulo_1_argument;

struct potencia_1_argument {
	int arg1;
	int arg2;
};
typedef struct potencia_1_argument potencia_1_argument;

struct raiz_1_argument {
	double arg1;
	double arg2;
};
typedef struct raiz_1_argument raiz_1_argument;

struct logaritmo_1_argument {
	int arg1;
	int arg2;
};
typedef struct logaritmo_1_argument logaritmo_1_argument;

struct sumavectorial_1_argument {
	vector3D arg1;
	vector3D arg2;
};
typedef struct sumavectorial_1_argument sumavectorial_1_argument;

struct restavectorial_1_argument {
	vector3D arg1;
	vector3D arg2;
};
typedef struct restavectorial_1_argument restavectorial_1_argument;

struct multporescalar_1_argument {
	vector3D arg1;
	int arg2;
};
typedef struct multporescalar_1_argument multporescalar_1_argument;

struct productoescalar_1_argument {
	vector3D arg1;
	vector3D arg2;
};
typedef struct productoescalar_1_argument productoescalar_1_argument;

struct productovectorial_1_argument {
	vector3D arg1;
	vector3D arg2;
};
typedef struct productovectorial_1_argument productovectorial_1_argument;

struct sumamatricial_1_argument {
	matrix arg1;
	matrix arg2;
};
typedef struct sumamatricial_1_argument sumamatricial_1_argument;

struct restamatricial_1_argument {
	matrix arg1;
	matrix arg2;
};
typedef struct restamatricial_1_argument restamatricial_1_argument;

struct multmatricial_1_argument {
	matrix arg1;
	matrix arg2;
};
typedef struct multmatricial_1_argument multmatricial_1_argument;

#define CALCULADORA 0x20000155
#define COMPLETA 1

#if defined(__STDC__) || defined(__cplusplus)
#define SUMA 1
extern  double * suma_1(double , double , CLIENT *);
extern  double * suma_1_svc(double , double , struct svc_req *);
#define RESTA 2
extern  double * resta_1(double , double , CLIENT *);
extern  double * resta_1_svc(double , double , struct svc_req *);
#define MULTIPLICA 3
extern  double * multiplica_1(double , double , CLIENT *);
extern  double * multiplica_1_svc(double , double , struct svc_req *);
#define DIVIDE 4
extern  double * divide_1(double , double , CLIENT *);
extern  double * divide_1_svc(double , double , struct svc_req *);
#define MODULO 5
extern  int * modulo_1(int , int , CLIENT *);
extern  int * modulo_1_svc(int , int , struct svc_req *);
#define POTENCIA 6
extern  int * potencia_1(int , int , CLIENT *);
extern  int * potencia_1_svc(int , int , struct svc_req *);
#define RAIZ 7
extern  double * raiz_1(double , double , CLIENT *);
extern  double * raiz_1_svc(double , double , struct svc_req *);
#define FACTORIAL 8
extern  int * factorial_1(int , CLIENT *);
extern  int * factorial_1_svc(int , struct svc_req *);
#define LOGARITMO 9
extern  double * logaritmo_1(int , int , CLIENT *);
extern  double * logaritmo_1_svc(int , int , struct svc_req *);
#define LOG_N 10
extern  double * log_n_1(int , CLIENT *);
extern  double * log_n_1_svc(int , struct svc_req *);
#define LOG10 11
extern  double * log10_1(int , CLIENT *);
extern  double * log10_1_svc(int , struct svc_req *);
#define SENO 12
extern  double * seno_1(double , CLIENT *);
extern  double * seno_1_svc(double , struct svc_req *);
#define COSENO 13
extern  double * coseno_1(double , CLIENT *);
extern  double * coseno_1_svc(double , struct svc_req *);
#define TANGENTE 14
extern  double * tangente_1(double , CLIENT *);
extern  double * tangente_1_svc(double , struct svc_req *);
#define SUMAVECTORIAL 15
extern  vector3D * sumavectorial_1(vector3D , vector3D , CLIENT *);
extern  vector3D * sumavectorial_1_svc(vector3D , vector3D , struct svc_req *);
#define RESTAVECTORIAL 16
extern  vector3D * restavectorial_1(vector3D , vector3D , CLIENT *);
extern  vector3D * restavectorial_1_svc(vector3D , vector3D , struct svc_req *);
#define MULTPORESCALAR 17
extern  vector3D * multporescalar_1(vector3D , int , CLIENT *);
extern  vector3D * multporescalar_1_svc(vector3D , int , struct svc_req *);
#define PRODUCTOESCALAR 18
extern  int * productoescalar_1(vector3D , vector3D , CLIENT *);
extern  int * productoescalar_1_svc(vector3D , vector3D , struct svc_req *);
#define PRODUCTOVECTORIAL 19
extern  vector3D * productovectorial_1(vector3D , vector3D , CLIENT *);
extern  vector3D * productovectorial_1_svc(vector3D , vector3D , struct svc_req *);
#define SUMAMATRICIAL 20
extern  matrix * sumamatricial_1(matrix , matrix , CLIENT *);
extern  matrix * sumamatricial_1_svc(matrix , matrix , struct svc_req *);
#define RESTAMATRICIAL 21
extern  matrix * restamatricial_1(matrix , matrix , CLIENT *);
extern  matrix * restamatricial_1_svc(matrix , matrix , struct svc_req *);
#define MULTMATRICIAL 22
extern  matrix * multmatricial_1(matrix , matrix , CLIENT *);
extern  matrix * multmatricial_1_svc(matrix , matrix , struct svc_req *);
extern int calculadora_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define SUMA 1
extern  double * suma_1();
extern  double * suma_1_svc();
#define RESTA 2
extern  double * resta_1();
extern  double * resta_1_svc();
#define MULTIPLICA 3
extern  double * multiplica_1();
extern  double * multiplica_1_svc();
#define DIVIDE 4
extern  double * divide_1();
extern  double * divide_1_svc();
#define MODULO 5
extern  int * modulo_1();
extern  int * modulo_1_svc();
#define POTENCIA 6
extern  int * potencia_1();
extern  int * potencia_1_svc();
#define RAIZ 7
extern  double * raiz_1();
extern  double * raiz_1_svc();
#define FACTORIAL 8
extern  int * factorial_1();
extern  int * factorial_1_svc();
#define LOGARITMO 9
extern  double * logaritmo_1();
extern  double * logaritmo_1_svc();
#define LOG_N 10
extern  double * log_n_1();
extern  double * log_n_1_svc();
#define LOG10 11
extern  double * log10_1();
extern  double * log10_1_svc();
#define SENO 12
extern  double * seno_1();
extern  double * seno_1_svc();
#define COSENO 13
extern  double * coseno_1();
extern  double * coseno_1_svc();
#define TANGENTE 14
extern  double * tangente_1();
extern  double * tangente_1_svc();
#define SUMAVECTORIAL 15
extern  vector3D * sumavectorial_1();
extern  vector3D * sumavectorial_1_svc();
#define RESTAVECTORIAL 16
extern  vector3D * restavectorial_1();
extern  vector3D * restavectorial_1_svc();
#define MULTPORESCALAR 17
extern  vector3D * multporescalar_1();
extern  vector3D * multporescalar_1_svc();
#define PRODUCTOESCALAR 18
extern  int * productoescalar_1();
extern  int * productoescalar_1_svc();
#define PRODUCTOVECTORIAL 19
extern  vector3D * productovectorial_1();
extern  vector3D * productovectorial_1_svc();
#define SUMAMATRICIAL 20
extern  matrix * sumamatricial_1();
extern  matrix * sumamatricial_1_svc();
#define RESTAMATRICIAL 21
extern  matrix * restamatricial_1();
extern  matrix * restamatricial_1_svc();
#define MULTMATRICIAL 22
extern  matrix * multmatricial_1();
extern  matrix * multmatricial_1_svc();
extern int calculadora_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_m (XDR *, m*);
extern  bool_t xdr_matrix (XDR *, matrix*);
extern  bool_t xdr_vector3D (XDR *, vector3D*);
extern  bool_t xdr_suma_1_argument (XDR *, suma_1_argument*);
extern  bool_t xdr_resta_1_argument (XDR *, resta_1_argument*);
extern  bool_t xdr_multiplica_1_argument (XDR *, multiplica_1_argument*);
extern  bool_t xdr_divide_1_argument (XDR *, divide_1_argument*);
extern  bool_t xdr_modulo_1_argument (XDR *, modulo_1_argument*);
extern  bool_t xdr_potencia_1_argument (XDR *, potencia_1_argument*);
extern  bool_t xdr_raiz_1_argument (XDR *, raiz_1_argument*);
extern  bool_t xdr_logaritmo_1_argument (XDR *, logaritmo_1_argument*);
extern  bool_t xdr_sumavectorial_1_argument (XDR *, sumavectorial_1_argument*);
extern  bool_t xdr_restavectorial_1_argument (XDR *, restavectorial_1_argument*);
extern  bool_t xdr_multporescalar_1_argument (XDR *, multporescalar_1_argument*);
extern  bool_t xdr_productoescalar_1_argument (XDR *, productoescalar_1_argument*);
extern  bool_t xdr_productovectorial_1_argument (XDR *, productovectorial_1_argument*);
extern  bool_t xdr_sumamatricial_1_argument (XDR *, sumamatricial_1_argument*);
extern  bool_t xdr_restamatricial_1_argument (XDR *, restamatricial_1_argument*);
extern  bool_t xdr_multmatricial_1_argument (XDR *, multmatricial_1_argument*);

#else /* K&R C */
extern bool_t xdr_m ();
extern bool_t xdr_matrix ();
extern bool_t xdr_vector3D ();
extern bool_t xdr_suma_1_argument ();
extern bool_t xdr_resta_1_argument ();
extern bool_t xdr_multiplica_1_argument ();
extern bool_t xdr_divide_1_argument ();
extern bool_t xdr_modulo_1_argument ();
extern bool_t xdr_potencia_1_argument ();
extern bool_t xdr_raiz_1_argument ();
extern bool_t xdr_logaritmo_1_argument ();
extern bool_t xdr_sumavectorial_1_argument ();
extern bool_t xdr_restavectorial_1_argument ();
extern bool_t xdr_multporescalar_1_argument ();
extern bool_t xdr_productoescalar_1_argument ();
extern bool_t xdr_productovectorial_1_argument ();
extern bool_t xdr_sumamatricial_1_argument ();
extern bool_t xdr_restamatricial_1_argument ();
extern bool_t xdr_multmatricial_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CALCULADORA_H_RPCGEN */
