#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from calculadora import Calculadora
from calculadora.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void ping()')
    print('  double suma(double n1, double n2)')
    print('  double resta(double n1, double n2)')
    print('  double multiplica(double n1, double n2)')
    print('  double divide(double n1, double n2)')
    print('  double logaritmo(i64 num, i64 base)')
    print('  double logaritmo_n(i64 num)')
    print('  double logaritmo10(i64 num)')
    print('  i64 modulo(i64 num, i64 mod)')
    print('  i64 potencia(i64 num, i64 exp)')
    print('  double raiz(double num, i64 raiz)')
    print('  i64 factorial(i64 num)')
    print('  double grados_a_radianes(double grados)')
    print('  double radianes_a_grados(double radians)')
    print('  double seno(double grados)')
    print('  double coseno(double grados)')
    print('  double tangente(double grados)')
    print('   suma_vectorial( v1,  v2)')
    print('   resta_vectorial( v1,  v2)')
    print('   multiplica_por_escalar( v1, double num)')
    print('  double producto_escalar( v1,  v2)')
    print('   producto_vectorial( v1,  v2)')
    print('   suma_matricial( m1,  m2)')
    print('   resta_matricial( m1,  m2)')
    print('   mult_matricial( m1,  m2)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Calculadora.Client(protocol)
transport.open()

if cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'suma':
    if len(args) != 2:
        print('suma requires 2 args')
        sys.exit(1)
    pp.pprint(client.suma(eval(args[0]), eval(args[1]),))

elif cmd == 'resta':
    if len(args) != 2:
        print('resta requires 2 args')
        sys.exit(1)
    pp.pprint(client.resta(eval(args[0]), eval(args[1]),))

elif cmd == 'multiplica':
    if len(args) != 2:
        print('multiplica requires 2 args')
        sys.exit(1)
    pp.pprint(client.multiplica(eval(args[0]), eval(args[1]),))

elif cmd == 'divide':
    if len(args) != 2:
        print('divide requires 2 args')
        sys.exit(1)
    pp.pprint(client.divide(eval(args[0]), eval(args[1]),))

elif cmd == 'logaritmo':
    if len(args) != 2:
        print('logaritmo requires 2 args')
        sys.exit(1)
    pp.pprint(client.logaritmo(eval(args[0]), eval(args[1]),))

elif cmd == 'logaritmo_n':
    if len(args) != 1:
        print('logaritmo_n requires 1 args')
        sys.exit(1)
    pp.pprint(client.logaritmo_n(eval(args[0]),))

elif cmd == 'logaritmo10':
    if len(args) != 1:
        print('logaritmo10 requires 1 args')
        sys.exit(1)
    pp.pprint(client.logaritmo10(eval(args[0]),))

elif cmd == 'modulo':
    if len(args) != 2:
        print('modulo requires 2 args')
        sys.exit(1)
    pp.pprint(client.modulo(eval(args[0]), eval(args[1]),))

elif cmd == 'potencia':
    if len(args) != 2:
        print('potencia requires 2 args')
        sys.exit(1)
    pp.pprint(client.potencia(eval(args[0]), eval(args[1]),))

elif cmd == 'raiz':
    if len(args) != 2:
        print('raiz requires 2 args')
        sys.exit(1)
    pp.pprint(client.raiz(eval(args[0]), eval(args[1]),))

elif cmd == 'factorial':
    if len(args) != 1:
        print('factorial requires 1 args')
        sys.exit(1)
    pp.pprint(client.factorial(eval(args[0]),))

elif cmd == 'grados_a_radianes':
    if len(args) != 1:
        print('grados_a_radianes requires 1 args')
        sys.exit(1)
    pp.pprint(client.grados_a_radianes(eval(args[0]),))

elif cmd == 'radianes_a_grados':
    if len(args) != 1:
        print('radianes_a_grados requires 1 args')
        sys.exit(1)
    pp.pprint(client.radianes_a_grados(eval(args[0]),))

elif cmd == 'seno':
    if len(args) != 1:
        print('seno requires 1 args')
        sys.exit(1)
    pp.pprint(client.seno(eval(args[0]),))

elif cmd == 'coseno':
    if len(args) != 1:
        print('coseno requires 1 args')
        sys.exit(1)
    pp.pprint(client.coseno(eval(args[0]),))

elif cmd == 'tangente':
    if len(args) != 1:
        print('tangente requires 1 args')
        sys.exit(1)
    pp.pprint(client.tangente(eval(args[0]),))

elif cmd == 'suma_vectorial':
    if len(args) != 2:
        print('suma_vectorial requires 2 args')
        sys.exit(1)
    pp.pprint(client.suma_vectorial(eval(args[0]), eval(args[1]),))

elif cmd == 'resta_vectorial':
    if len(args) != 2:
        print('resta_vectorial requires 2 args')
        sys.exit(1)
    pp.pprint(client.resta_vectorial(eval(args[0]), eval(args[1]),))

elif cmd == 'multiplica_por_escalar':
    if len(args) != 2:
        print('multiplica_por_escalar requires 2 args')
        sys.exit(1)
    pp.pprint(client.multiplica_por_escalar(eval(args[0]), eval(args[1]),))

elif cmd == 'producto_escalar':
    if len(args) != 2:
        print('producto_escalar requires 2 args')
        sys.exit(1)
    pp.pprint(client.producto_escalar(eval(args[0]), eval(args[1]),))

elif cmd == 'producto_vectorial':
    if len(args) != 2:
        print('producto_vectorial requires 2 args')
        sys.exit(1)
    pp.pprint(client.producto_vectorial(eval(args[0]), eval(args[1]),))

elif cmd == 'suma_matricial':
    if len(args) != 2:
        print('suma_matricial requires 2 args')
        sys.exit(1)
    pp.pprint(client.suma_matricial(eval(args[0]), eval(args[1]),))

elif cmd == 'resta_matricial':
    if len(args) != 2:
        print('resta_matricial requires 2 args')
        sys.exit(1)
    pp.pprint(client.resta_matricial(eval(args[0]), eval(args[1]),))

elif cmd == 'mult_matricial':
    if len(args) != 2:
        print('mult_matricial requires 2 args')
        sys.exit(1)
    pp.pprint(client.mult_matricial(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
